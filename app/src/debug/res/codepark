if (ContextCompat.checkSelfPermission(this, Manifest.permission.SYSTEM_ALERT_WINDOW) != PackageManager.PERMISSION_GRANTED) {
    Log.d(Constants.DBG_CHATHEAD, "Permission is not granted");

    if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.SYSTEM_ALERT_WINDOW)) {
        Log.d(Constants.DBG_CHATHEAD, "Permission was denied in the past, should show rationale");
        showMessageOKCancel(getString(R.string.perm_chathead), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                ActivityCompat.requestPermissions(MainActivity.this, new String[] {Manifest.permission.SYSTEM_ALERT_WINDOW}, 123);
            }
        });
    } else {
        ActivityCompat.requestPermissions(MainActivity.this, new String[] {Manifest.permission.SYSTEM_ALERT_WINDOW}, 123);
    }
}



@Override
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
    switch (requestCode) {
        case Constants.CHATHEAD_PERMISSION:
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED){
                Log.d(Constants.DBG_CHATHEAD, "User granted permission");
                Intent intent = new Intent(this, FloatingViewService.class);
                startService(intent);
            } else {
                Log.d(Constants.DBG_CHATHEAD, "User denied permission");
                Toast denied_t = Toast.makeText(this, getString(R.string.perm_chathead_denied), Toast.LENGTH_LONG);
                denied_t.show();
            }

        default:
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }
}

, new DialogInterface.OnClickListener(){
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    Toast denied_t = Toast.makeText(MainActivity.this, getString(R.string.perm_chathead_denied), Toast.LENGTH_LONG);
                    denied_t.show();
                    overlay = false;
                }
            }





















        <LinearLayout
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:orientation="vertical">
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/looking_for_text"
                android:layout_gravity="center"
                android:textColor="@color/colorPrimary"
                android:textSize="14sp"/>
            <ImageView
                android:id="@+id/looking_for_button"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/parking_sign"
                android:padding="5dp"/>
        </LinearLayout>

        <LinearLayout
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:orientation="vertical">
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/parked_text"
                android:layout_gravity="center"
                android:textColor="@color/colorPrimary"
                android:textSize="14sp"/>
            <ImageView
                android:id="@+id/park_button"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/parked"
                android:padding="5dp"/>
        </LinearLayout>

        <LinearLayout
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:orientation="vertical">
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/leaving_text"
                android:layout_gravity="center"
                android:textColor="@color/colorPrimary"
                android:textSize="14sp"/>
            <ImageView
                android:id="@+id/leave_button"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@drawable/automobile"
                android:padding="5dp"/>
        </LinearLayout>












        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putLong(Constants.PARKED_LAT, Double.doubleToRawLongBits(finalLat));
        editor.putLong(Constants.PARKED_LONG, Double.doubleToRawLongBits(finalLong));
        editor.apply();










    private enum action {NO_ACT, LEAVE_ACT, PARK_ACT}

    private action curAct = action.NO_ACT;



    /*
    Private Server Management
     */

    private void sendLeaveRequest(ParkedCar parkedCar) {
        try {
            Gson gson = new Gson();
            Parking parking = new Parking(parkedCar);
            JSONObject parkingJO = new JSONObject(gson.toJson(parking));

            RequestQueue queue = Volley.newRequestQueue(this);
            String url = "http://192.168.1.75:8000/service/parkings/";

            JsonObjectRequest request = new JsonObjectRequest(Request.Method.POST, url, parkingJO,
                    new Response.Listener<JSONObject>() {
                        @Override
                        public void onResponse(JSONObject response) {
                            Log.d(Constants.DBG_ALOG, "Response is: " + response.toString());
                        }
                    }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    Log.e(Constants.DBG_ALOG, "Volley connection on sendLeaveRequest failed");
                }
            });
            queue.add(request);
        }
        catch (Exception e) {
            Log.e(Constants.DBG_ALOG, "Error in Volley on sendLeaveRequest");
            e.printStackTrace();
        }
    }



